Guide pratique — Scénarios d’attaques et preuves (pour SIEM-Lab)

Important sécurité / éthique
Tous les tests ci-dessous doivent être exécutés uniquement dans la VM de laboratoire (ou sur un réseau privé contrôlé). NE lance rien sur Internet public ou sur des machines que tu ne possèdes pas.

Sommaire

Préambule — architecture logs (Suricata → Filebeat → Elasticsearch → Kibana)

Commandes de vérification initiales

Scénario 1 — Injection SQL (démo)

Scénario 2 — Scan de ports (Nmap)

Scénario 3 — DoS léger (hping3) — très limité

Scénario 4 — Brute force SSH (auth logs)

Scénario 5 — Téléchargement suspect (HTTP)

Collecte de preuves (logs / exports / captures d’écran)

Requêtes KQL utiles et création de dashboard Kibana


1) Scénario 1 — Injection SQL (démo)
Objectif

Préconditions

Avoir un serveur web local (ex : /var/www/html ou python -m http.server), ou idéalement DVWA/bWAPP.

Suricata doit inspecter le trafic web (mode approprié).

Une requête avec payload :

curl -i 'http://127.0.0.1/?q=1%27%20OR%20%271%27=%271'

Requête KQL (barre de recherche Kibana)

Capture à inclure dans le guide

Le curl dans le terminal.

L’extrait JSON correspondant dans /var/log/suricata/eve.json.

La capture d’écran Kibana Discover montrant l’événement et les champs url / http.request.body.

2) Scénario 2 — Scan de ports (Nmap)
Objectif

Détecter un scan de ports (SYN scan) par Suricata et le visualiser dans Kibana.

Ce que Suricata doit produire

event_type: "alert" avec signature contenant scan (si règles IDS inclues).

Beaucoup d’event_type: "flow" avec network.transport: "tcp" et différents dest.port.

Kibana Discover avec un histogramme temporel montrant le pic pendant le scan.

3) Scénario 3 — DoS léger (hping3) — LIMITÉ

ATTENTION : DoS peut rendre la VM instable. Limite très fortement l’intensité (ex. 200 paquets). Ne fais pas de --flood sur un réseau partagé.

Ce que Suricata doit produire

Alerts pour flood / beaucoup de flow events.

Tu verras un pic temporel dans Kibana.

Time series Kibana montrant le pic.

4) Scénario 4 — Brute force SSH (auth logs)
Objectif

Montrer corrélation entre tentatives SSH dans /var/log/auth.log (Filebeat) et event réseau détecté par Suricata.

Suricata : connexions répétées TCP sur le port 22 (flows/alerts).

Extraits /var/log/auth.log.

Kibana Discover : event.dataset: "system.auth" affichant les échecs.

Corrélation : montrer timestamp matching entre flow Suricata et log auth.

5) Scénario 5 — Téléchargement suspect (HTTP)
Objectif

Simuler téléchargement d’un fichier / User-Agent suspect afin que Suricata logge http event.

Ce que Suricata doit produire

event_type: "http" avec http.request.headers.user_agent, http.response.status_code, url ou http.response.body si deep inspection.

Commande wget/curl.

JSON d’eve.json correspondant.

Kibana Discover montrant user_agent et URL.
